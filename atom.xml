<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Py-blog</title>
  
  <subtitle>番禺小黑屋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pyblog.jimmycheese.xyz/"/>
  <updated>2021-04-20T14:58:43.548Z</updated>
  <id>https://pyblog.jimmycheese.xyz/</id>
  
  <author>
    <name>Pancilyo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件工程导论第一章问题总结</title>
    <link href="https://pyblog.jimmycheese.xyz/2020/09/29/ruan-jian-gong-cheng-dao-lun-di-yi-zhang-wen-ti-zong-jie/"/>
    <id>https://pyblog.jimmycheese.xyz/2020/09/29/ruan-jian-gong-cheng-dao-lun-di-yi-zhang-wen-ti-zong-jie/</id>
    <published>2020-09-29T00:52:44.000Z</published>
    <updated>2021-04-20T14:58:43.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章问题："><a href="#第一章问题：" class="headerlink" title="第一章问题："></a>第一章问题：</h1><h2 id="我们总共学了哪几种软件过程模型，他们分别适合什么样的开发场景？-答案跟下问部分重复"><a href="#我们总共学了哪几种软件过程模型，他们分别适合什么样的开发场景？-答案跟下问部分重复" class="headerlink" title="我们总共学了哪几种软件过程模型，他们分别适合什么样的开发场景？(答案跟下问部分重复)"></a>我们总共学了哪几种软件过程模型，他们分别适合什么样的开发场景？(答案跟下问部分重复)</h2><h2 id="请简述瀑布模型、增量模型、原型模型、螺旋模型、喷泉模型、敏捷开发方法、统一过程模型RUP的优缺点和适用范围？"><a href="#请简述瀑布模型、增量模型、原型模型、螺旋模型、喷泉模型、敏捷开发方法、统一过程模型RUP的优缺点和适用范围？" class="headerlink" title="请简述瀑布模型、增量模型、原型模型、螺旋模型、喷泉模型、敏捷开发方法、统一过程模型RUP的优缺点和适用范围？"></a>请简述瀑布模型、增量模型、原型模型、螺旋模型、喷泉模型、敏捷开发方法、统一过程模型RUP的优缺点和适用范围？</h2><h3 id="1、瀑布模型"><a href="#1、瀑布模型" class="headerlink" title="1、瀑布模型"></a>1、瀑布模型</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​    •按照软件的生命周期一步步地把软件执行完毕（1970-&gt;之后几十年主流的方法）</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>提供了软件过程模型的基本框架（模板）。</li><li>强调了每一阶段活动的严格顺序。</li><li>质量保证观点：以经过评审确认了的阶段工作产品（文档）动下一阶段的工作，便于管理。</li><li><del>是一种整体开发模型，程序的物理实现集中在开发阶段的后期，用户在最后才能看到自己的产品。（coding占1/6时间）</del></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>​    “瀑布模型是由文档驱动的”这个事实也是它的一个主要缺点：</p><ol><li>实际项目很少按照该模型给出的顺序进行；</li><li>用户常常难以清楚地给出所有需求；</li><li>用户必须有耐心，等到系统开发完成。</li></ol><h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4><p>​    瀑布模型适合于用户需求明确、完整、无重大变化的软件项目开发。瀑布模型的成功在很大程度上是由于它基本上是一种文档驱动的模型</p><h3 id="2、增量模型"><a href="#2、增量模型" class="headerlink" title="2、增量模型"></a>2、增量模型</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>​    •增量模型是把待开发的软件系统模块化，将每个模块作为一个增量组件，从而分批次地分析、设计、编码和测试这些增量组件。运用增量模型的软件开发过程是递增式的过程。相对于瀑布模型而言，采用增量模型进行开发，开发人员不需要一次性地把整个软件产品提交给用户，而是可以分批次进行提交。</p><h4 id="增量模型的特点"><a href="#增量模型的特点" class="headerlink" title="增量模型的特点"></a>增量模型的特点</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol><li>在较短时间内向用户提交可完成部分工作的产品，并分批、逐步地向用户提交产品。从第一个构件交付之日起，用户就能做一些有用的工作。</li><li>整个软件产品被分解成许多个增量构件，开发人员可以一个构件一个构件地逐步开发。</li><li>逐步增加产品功能可以使用户有较充裕的时间学习和适应新产品，从而减少一个全新的软件可能给客户组织带来的冲击。</li><li>采用增量模型比采用瀑布模型和快速原型模型需要更精心的设计，但在设计阶段多付出的劳动将在维护阶段获得回报。</li></ol><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>在把每个新的增量构件集成到现有软件体系结构中时，必须不破坏原来已经开发出的产品。此外，必须把软件的体系结构设计得便于按这种方式进行扩充，向现有产品中加入新构件的过程必须简单、方便，也就是说，软件体系结构必须是开放的。</li><li>开发人员既要把软件系统看作整体。又要看成可独立的构件，相互矛盾。</li><li>多个构件并行开发，具有无法集成的风险。</li></ol><h4 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h4><ol><li>软件产品可以分批次地进行交付。</li><li>待开发的软件系统能够被模块化。</li><li>软件开发人员对应用领域不熟悉，难以一次性地进行系统开发。</li><li>项目管理人员把握全局的水平较高。 </li></ol><h3 id="3、螺旋模型"><a href="#3、螺旋模型" class="headerlink" title="3、螺旋模型"></a>3、螺旋模型</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>​    螺旋模型将瀑布模型和增量模型结合起来，加入了风险分析。在该模型中，软件开发是一系列的增量发布，早期的迭代中，发布的增量可能是一个纸上的模型或原型，在以后的迭代中，逐步产生系统更加完善的版本。</p><p>​    螺旋模型的基本思想是降低风险。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li>设计上的灵活性,可以在项目的各个阶段进行变更。</li><li>以小的分段来构建大型系统,使成本计算变得简单容易。</li><li>客户始终参与每个阶段的开发,保证了项目不偏离正确方向以及项目的可控性。</li><li>随着项目推进,客户始终掌握项目的最新信息 , 从而他或她能够和管理层有效地交互。</li><li>客户认可这种公司内部的开发方式带来的良好的沟通和高质量的产品。</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>​    很难让用户确信这种演化方法的结果是可以控制的。建设周期长，而软件技术发展比较快，所以经常出现软件开发完毕后，和当前的技术水平有了较大的差距，无法满足当前用户需求。</p><h4 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h4><p>​    对于新近开发，需求不明确的情况下，适合用螺旋模型进行开发，便于风险控制和需求变更。</p><h3 id="4、原型模型"><a href="#4、原型模型" class="headerlink" title="4、原型模型"></a>4、原型模型</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>​    在用户不能给出完整、准确的需求说明，或者开发者不能确定算法的有效性、操作系统的适应性或人机交互的形式等许多情况下，可以根据用户的一组基本需求，快速建造一个原型（可运行的软件），然后进行评估，进一步精化、调整原型，使其满足用户的要求，也使开发者对将要做的事情有更好的理解。</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li>克服瀑布模型的缺点，减少由于软件需求不明确带来的开发风险。</li><li>这种模型适合预先不能确切定义需求的软件系统的开发。</li></ol><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>​    所选用的开发技术和工具不一定符合主流的发展；快速建立起来的系统结构加上连续的修改可能会导致产品质量低下。</p><h4 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h4><p>​    使用这个模型的前提是要有一个展示性的产品原型，因此在一定程度上可能会限制开发人员的创新。</p><h3 id="5、喷泉模型"><a href="#5、喷泉模型" class="headerlink" title="5、喷泉模型"></a>5、喷泉模型</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>​    喷泉模型（fountain model）是一种以用户需求为动力，以对象为驱动的模型，主要用于描述面向对象的软件开发过程。该模型认为软件开发过程自下而上周期的各阶段是相互迭代和无间隙的特性。</p><h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><p>喷泉模型不像瀑布模型那样，需要分析活动结束后才开始设计活动，设计活动结束后才开始编码活动。该模型的各个阶段没有明显的界限，开发人员可以同步进行开发。其优点是可以提高软件项目开发效率，节省开发时间，适应于面向对象的软件开发过程。</p><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><p>由于喷泉模型在各个开发阶段是重叠的，因此在开发过程中需要大量的开发人员，因此不利于项目的管理。此外这种模型要求严格管理文档，使得审核的难度加大，尤其是面对可能随时加入各种信息、需求与资料的情况。</p><h4 id="适用范围-4"><a href="#适用范围-4" class="headerlink" title="适用范围"></a>适用范围</h4><p>​    适应于面向对象的软件开发过程。</p><h3 id="6、敏捷软件开发-CMM工作量大"><a href="#6、敏捷软件开发-CMM工作量大" class="headerlink" title="6、敏捷软件开发(CMM工作量大)"></a>6、敏捷软件开发(CMM工作量大)</h3><h4 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h4><p>​    敏捷过程为了使软件开发团队具有高效工作和快速响应变化的能力，17位著名的软件专家于2001年2月联合起草了敏捷软件开发宣言。敏捷软件开发宣言由下述4个简单的价值观声明组成。</p><p> ① 人员和交互胜过过程和工具</p><p> ② 可以工作的软件胜过面面俱到的文档</p><p> ③ 与客户合作胜过合同谈判</p><p> ④ 响应变更胜过遵循计划(快速开发、规模小)</p><h4 id="敏捷软件开发特点"><a href="#敏捷软件开发特点" class="headerlink" title="敏捷软件开发特点"></a>敏捷软件开发特点</h4><p>•所有人参加设计、开发</p><p>•用户参与，同时工作</p><p>•文档少</p><p>•结对编程</p><p>•测试驱动</p><p>•需求可变</p><p>•极小发布，系统一直可用</p><p>•开发人员主动领取任务，而不是安排</p><p>•限制：对开发人员要求高，技术高，积极性高</p><p>•人员少，小型项目</p><p>•客户参与困难</p><h4 id="适用范围-5"><a href="#适用范围-5" class="headerlink" title="适用范围"></a>适用范围</h4><p>​    敏捷过程具体对变化和不确定性的更快速、更敏捷的反应特性，而且在快速的同时仍然能保持可持续的开发速度，因此较适用于开发可用资源及开发时间都有较苛刻的约束的小型项目。</p><h3 id="7、开放源代码软件"><a href="#7、开放源代码软件" class="headerlink" title="7、开放源代码软件"></a>7、开放源代码软件</h3><h4 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h4><p>​    •开放源码软件(open-source)是一个新名词，它被定义为描述其源码可以被公众使用的软件，并且此软件的使用，修改和分发也不受许可证的限制。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>•降低风险(公司破产，有源码可以找别的公司继续维护)</p><p>•质量(使用者也是开发者，可以发现bug)</p><p>•透明(接触源码bug更快更早找到)</p><p>•剪裁(可定制算法)</p><h3 id="8、SaaS-Software-as-a-Service简称"><a href="#8、SaaS-Software-as-a-Service简称" class="headerlink" title="8、SaaS(Software-as-a-Service简称)"></a>8、SaaS(Software-as-a-Service简称)</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>•新的软件应用模式</p><p>•厂商统一部署应用软件</p><p>•客户按需获得服务</p><h3 id="9、统一过程模型RUP"><a href="#9、统一过程模型RUP" class="headerlink" title="9、统一过程模型RUP"></a>9、统一过程模型RUP</h3><h4 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h4><p>Rational ：Rational统一过程是由Rational公司开发并维护的，可以将RUP看成一款软件产品，并和一系列软件开发工具紧密集成；</p><p>统一：Rational统一过程拥有自己的一套架构，并且这套架构是以一种大多数项目和开发组织都能够接受的形式存在；</p><p>过程：Rational统一过程是一种软件开发过程，提够了如何对软件开发组织进行管理的方式，并拥有自己的目标和方法；</p><h4 id="RUP的五个阶段"><a href="#RUP的五个阶段" class="headerlink" title="RUP的五个阶段"></a>RUP的五个阶段</h4><ol><li>初始(inception) 阶段</li><li>细化(elaboration)阶段</li><li>构造(construction)阶段</li><li>移交(transition)阶段</li><li>生产(production)阶段</li></ol><h4 id="RUP软件过程框架"><a href="#RUP软件过程框架" class="headerlink" title="RUP软件过程框架"></a>RUP软件过程框架</h4><p>软件项目团队可利用五个阶段、九个工作流组成一个软件项目开发框架，组织软件项目的开发，完成软件从初始到生产的进化。</p><h5 id="RUP-将软件开发过程分解为九个工作流，即子过程"><a href="#RUP-将软件开发过程分解为九个工作流，即子过程" class="headerlink" title="RUP 将软件开发过程分解为九个工作流，即子过程"></a>RUP 将软件开发过程分解为九个工作流，即子过程</h5><p>​    管理、环境、配置和变更管理、业务建模、需求、设计、实现、部署、实施 </p><h5 id="将软件生存周期，即软件制品的进化状态划分为五个阶段："><a href="#将软件生存周期，即软件制品的进化状态划分为五个阶段：" class="headerlink" title="将软件生存周期，即软件制品的进化状态划分为五个阶段："></a>将软件生存周期，即软件制品的进化状态划分为五个阶段：</h5><p>​    初始、细化、构造、移交、生产</p><p>RUP支持软件工程的迭代开发、管理软件需求、基于构件的架构、可视化建模、软件质量保证、软件变更管理等。</p><h2 id="相对传统的软件产品销售，今天的SaaS-对软件工程有什么影响？"><a href="#相对传统的软件产品销售，今天的SaaS-对软件工程有什么影响？" class="headerlink" title="相对传统的软件产品销售，今天的SaaS , 对软件工程有什么影响？"></a>相对传统的软件产品销售，今天的SaaS , 对软件工程有什么影响？</h2><p>•按需服务👉SOA（面向服务的架构）、组件化、可定制</p><p>•软件部署值得关注</p><p>• 软件服务运营更具挑战，甚至可以说是一项崭新的内容</p><p>•软件发布的成本变得很低，所以可以频繁地发布新的版本</p><p>•软件系统的可伸缩性</p><p>•7x24不间断的软件服务要求系统的高可靠性</p><p>•… …</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章问题：&quot;&gt;&lt;a href=&quot;#第一章问题：&quot; class=&quot;headerlink&quot; title=&quot;第一章问题：&quot;&gt;&lt;/a&gt;第一章问题：&lt;/h1&gt;&lt;h2 id=&quot;我们总共学了哪几种软件过程模型，他们分别适合什么样的开发场景？-答案跟下问部分重复&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="软件工程导论" scheme="https://pyblog.jimmycheese.xyz/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo插件（一）：使用Markdown显示图片</title>
    <link href="https://pyblog.jimmycheese.xyz/2020/07/25/hexo-cha-jian-yi-shi-yong-markdown-xian-shi-tu-pian/"/>
    <id>https://pyblog.jimmycheese.xyz/2020/07/25/hexo-cha-jian-yi-shi-yong-markdown-xian-shi-tu-pian/</id>
    <published>2020-07-25T20:21:40.000Z</published>
    <updated>2021-04-20T14:58:43.536Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>hexo</code>默认无法自动处理文章插入本地图片，需要通过扩展插件支持。</p></blockquote><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>1.直接安装已经修改过的插件<code>hexo-asset-image</code>。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/7ym0n/hexo-asset-image --sa</code></pre><p>2.设置Typora中图片储存路径</p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/2022546106242260222652615620.jpg" alt=""></p><p>每次插入图片都可以将图片复制到当前目录下以标题命名的文件夹中</p><p>3.设置Hexo根目录下配置<code>_config.yml</code>里面的<code>post_asset_folder:false</code>这个选项设置为<code>true</code>。</p><p>自此即可顺利使用Markdown将图片插入文章中</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;hexo&lt;/code&gt;默认无法自动处理文章插入本地图片，需要通过扩展插件支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决办法：&quot;&gt;&lt;a href=&quot;#解决办法：&quot; class=&quot;headerlink&quot; title=&quot;解决
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://pyblog.jimmycheese.xyz/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://pyblog.jimmycheese.xyz/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="https://pyblog.jimmycheese.xyz/2020/07/25/shi-yong-hexo-da-jian-ge-ren-bo-ke/"/>
    <id>https://pyblog.jimmycheese.xyz/2020/07/25/shi-yong-hexo-da-jian-ge-ren-bo-ke/</id>
    <published>2020-07-25T12:04:08.000Z</published>
    <updated>2021-04-20T14:58:43.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初步搭建本地Hexo博客"><a href="#一、初步搭建本地Hexo博客" class="headerlink" title="一、初步搭建本地Hexo博客"></a>一、初步搭建本地Hexo博客</h2><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>搭建环境：Windows 10</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>验证成功安装Node.js跟Git，通过查看版本号即可</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><pre class=" language-bash"><code class="language-bash">npm-v</code></pre><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725131425100.png" alt=""></p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><h2 id="2-建站"><a href="#2-建站" class="headerlink" title="2.建站"></a>2.建站</h2><h3 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class=" language-bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>项目名称<span class="token operator">></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725132809692.png" alt=""></p><p>通过VScode软件打开初始化的博客（我这里命名为了test）</p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>运行服务：（hexo默认使用4000端口）</p><pre class=" language-bash"><code class="language-bash">hexo s</code></pre><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725133651823.png" alt=""></p><p>通过 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 访问本地hexo服务</p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725133817847.png" alt=""></p><h2 id="二、更换博客主题（hexo-theme-matery）"><a href="#二、更换博客主题（hexo-theme-matery）" class="headerlink" title="二、更换博客主题（hexo-theme-matery）"></a>二、更换博客主题（hexo-theme-matery）</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery中文文档</a></p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h3 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2.更换主题"></a>2.更换主题</h3><p>将博客文件夹下的配置文件<code>_config.yml</code>的主题<code>theme</code>改成：<code>hexo-theme-matery</code></p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725140219653.png" alt=""></p><p>更换完成重新运行服务：</p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725140922499.png" alt=""></p><p>主题已成功修改</p><h3 id="3-更换中文"><a href="#3-更换中文" class="headerlink" title="3.更换中文"></a>3.更换中文</h3><p>将博客文件夹下的配置文件<code>_config.yml</code>的语言<code>language</code>改为<code>zh-CN</code></p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725141430234.png" alt=""></p><h3 id="4-修改主题项中的配置"><a href="#4-修改主题项中的配置" class="headerlink" title="4.修改主题项中的配置"></a>4.修改主题项中的配置</h3><p>根据<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery中文文档</a>可自行添加功能项</p><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "categories"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "tags"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "about"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><h4 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "friends"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre><code>[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre><h4 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre><code>---title: 404date: 2018-09-30 17:25:30type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("---</code></pre><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code>highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h4 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h4 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre><code>postInfo:  date: true  update: false  wordCount: false # 设置文章字数统计为 true.  totalCount: false # 设置站点文章总字数统计为 true.  min2read: false # 阅读时长.  readCount: false # 阅读次数.</code></pre><h4 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre><code>npm install hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h4 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre><code>npm install hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h2 id="三、Github上搭建博客"><a href="#三、Github上搭建博客" class="headerlink" title="三、Github上搭建博客"></a>三、Github上搭建博客</h2><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725152023656.png" alt=""></p><h3 id="2-初始化仓库"><a href="#2-初始化仓库" class="headerlink" title="2.初始化仓库"></a>2.初始化仓库</h3><h5 id="①初始化本地仓库"><a href="#①初始化本地仓库" class="headerlink" title="①初始化本地仓库"></a>①初始化本地仓库</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init</code></pre><h5 id="②添加一个远程git地址"><a href="#②添加一个远程git地址" class="headerlink" title="②添加一个远程git地址"></a>②添加一个远程git地址</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725152722867.png" alt=""></p><h3 id="3-安装hexo-depoyler-git依赖"><a href="#3-安装hexo-depoyler-git依赖" class="headerlink" title="3.安装hexo-depoyler-git依赖"></a>3.安装hexo-depoyler-git依赖</h3><pre class=" language-bash"><code class="language-bash">yarn add hexo-deployer-git</code></pre><h3 id="4-修改部署相关的配置："><a href="#4-修改部署相关的配置：" class="headerlink" title="4.修改部署相关的配置："></a>4.修改部署相关的配置：</h3><p>修改 Hexo 根目录下 <code>_config.yml</code> 文件中<code>deploy</code>的相关属性：</p><pre><code>deploy:  type: git  repo: &lt;仓库地址&gt;  branch: master</code></pre><h3 id="5-部署代码"><a href="#5-部署代码" class="headerlink" title="5.部署代码"></a>5.部署代码</h3><pre><code>npm run deploy</code></pre><p>查看站点是否已被部署成功打开github仓库中<code>setting</code>选项，拉下去找到<code>GitHub Pages</code></p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725155309299.png" alt="显示此页面即部署成功"></p><p>打开站点查看</p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725155434288.png" alt="站点已成功部署，并且可以访问"></p><h2 id="四、实现Github自动化部署"><a href="#四、实现Github自动化部署" class="headerlink" title="四、实现Github自动化部署"></a>四、实现Github自动化部署</h2><p>由于上面操作中master分支已被占用，我们要把源代码提交到另外一个分支上</p><h3 id="1-首先commit本地代码"><a href="#1-首先commit本地代码" class="headerlink" title="1.首先commit本地代码"></a>1.首先commit本地代码</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'feat:blog init'</span></code></pre><h3 id="2-切换分支-myblog"><a href="#2-切换分支-myblog" class="headerlink" title="2.切换分支 myblog"></a>2.切换分支 myblog</h3><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725160131082.png" alt=""></p><h3 id="3-将myblog分支push到github中"><a href="#3-将myblog分支push到github中" class="headerlink" title="3.将myblog分支push到github中"></a>3.将myblog分支push到github中</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push --set-upstream origin myblog</code></pre><h3 id="4-配置github-actions"><a href="#4-配置github-actions" class="headerlink" title="4.配置github actions"></a>4.配置github actions</h3><p>在hexo根目录下创建文件<code>deploy.yml</code>，文件路径为：<code>.github/workflows/deploy.yml</code></p><details>    <summary>文件内容</summary><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Build and Deploy<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout 🛎️        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2 <span class="token comment" spellcheck="true"># If you're using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.</span>        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">persist-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install and Build 🔧 <span class="token comment" spellcheck="true"># This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.</span>    <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      npm install      npm run build</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">CI</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy 🚀    <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@releases/v3    <span class="token key atrule">with</span><span class="token punctuation">:</span>      <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token key atrule">BRANCH</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true"># The branch the action should deploy to.</span>      <span class="token key atrule">FOLDER</span><span class="token punctuation">:</span> public <span class="token comment" spellcheck="true"># The folder the action should deploy.</span></code></pre></details><p>提交到仓库中：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'feat:添加github action'</span><span class="token function">git</span> push</code></pre><p>测试一下github action是否生效，修改一下文章内容并提交</p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725163206393.png" alt="有黄点表示触发了github action"></p><p>点进去查看：</p><p><img src="https://cdn.jsdelivr.net/gh/pancilyo/pancilyo.github.io@myblog/source/_posts/MdPicture/image-20200725163250287.png" alt=""></p><p>自此自动化部署已完成。</p><p>文章参考自：</p><p><a href="https://www.bilibili.com/video/BV1dt4y1Q7UE?t=711" target="_blank" rel="noopener">【干货】Luke教你20分钟快速搭建个人博客系列(hexo篇) | 自动化部署在线编辑统统搞定 | 前端必会！</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、初步搭建本地Hexo博客&quot;&gt;&lt;a href=&quot;#一、初步搭建本地Hexo博客&quot; class=&quot;headerlink&quot; title=&quot;一、初步搭建本地Hexo博客&quot;&gt;&lt;/a&gt;一、初步搭建本地Hexo博客&lt;/h2&gt;&lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://pyblog.jimmycheese.xyz/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://pyblog.jimmycheese.xyz/tags/Markdown/"/>
    
  </entry>
  
</feed>
